// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "forge-std/Test.sol";
import "../src/IvCheckVerifier.sol";
import {console} from "forge-std/console.sol";

contract IvCheckVerifierTest is Test {
    IvCheckVerifier verifier;
    IvCheckVerifier.Values[] public values;
    uint256[] public strikes;
    uint256[] public v;

    function setUp() public {
        verifier = new IvCheckVerifier();
    }

    function testVerifyData() public {
        uint88[32] memory wsApiStikes = [
            10000000000000000000000000,
            7600000000000000000000000,
            7800000000000000000000000,
            7900000000000000000000000,
            8000000000000000000000000,
            8100000000000000000000000,
            8200000000000000000000000,
            8250000000000000000000000,
            8300000000000000000000000,
            8350000000000000000000000,
            8400000000000000000000000,
            8450000000000000000000000,
            8500000000000000000000000,
            8550000000000000000000000,
            8600000000000000000000000,
            8650000000000000000000000,
            8700000000000000000000000,
            8750000000000000000000000,
            8800000000000000000000000,
            8850000000000000000000000,
            8900000000000000000000000,
            8950000000000000000000000,
            9000000000000000000000000,
            9050000000000000000000000,
            9100000000000000000000000,
            9150000000000000000000000,
            9200000000000000000000000,
            9300000000000000000000000,
            9400000000000000000000000,
            9500000000000000000000000,
            9600000000000000000000000,
            9800000000000000000000000
        ];
        uint72[32] memory wsApiV = [
            72036015184963730000,
            133511496174831300000,
            123971104041968560000,
            119014800317048080000,
            113911069691895040000,
            108637894914883120000,
            103168294404630420000,
            100349641526797280000,
            97468623511500200000,
            94519589896551280000,
            91496105118834400000,
            88390799161126020000,
            85195186730218220000,
            81899451965391200000,
            78492202193874500000,
            74960213257226170000,
            71288240912525560000,
            67459114777926020000,
            63454732172832230000,
            59259768655943270000,
            54873789278980080000,
            50350817792966600000,
            45930043263673200000,
            42376214050826105000,
            40939471239066100000,
            41604544692951980000,
            43277695471227940000,
            47409123355530630000,
            51576854040315210000,
            55524848217987210000,
            59229107752411510000,
            65987324680413030000
        ];

        for (uint256 i = 0; i < wsApiStikes.length; i++) {
            strikes.push(wsApiStikes[i]);
            v.push(wsApiV[i]);
        }
        values.push(IvCheckVerifier.Values({sid: "0x1", strike: strikes, v: v}));

        IvCheckVerifier.Data memory data = IvCheckVerifier.Data({values: values, timestamp: int256(1745343870500)});

        IvCheckVerifier.SplitSig memory sig = IvCheckVerifier.SplitSig({
            r: 0xcf47b5c77c19b6d3c4265e16b105a3595b451cc6100a107a0c2881894ccf51f6,
            s: 0x1763c423e59a0ee82037f93b1f4771a7809cca384b4b952b3e45b4697a7f48d6,
            v: 27
        });

        address signer = address(0x47ebFBAda4d85Dac6b9018C0CE75774556A8243f);
        bool isValid = verifier.verifyData(data, sig, signer);

        assertTrue(isValid, "Signature should be invalid");
    }
}
